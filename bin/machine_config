#!/usr/bin/perl
use warnings;
use strict;
use Carp;
use Config::Std;
use IO::Dir;
use IPC::Open3;
use Getopt::Long;

my $usage = "

Synopsis:
	./machine_config --step deps
	./machine_config --step config

Description:

	Two action available from script are to install needed Perl dependencies 
	and to build a configure file for the machine.


Required Option:

	-s, --step	Which step to preform [deps or config].

\n";

my %c_opts = ();
GetOptions(
	\%c_opts,
	"step|s=s",
	"help|h",
);
croak $usage if $c_opts{help};
croak $usage unless %c_opts;

if ( $c_opts{step} eq 'deps' ) { build_perl_deps(); }
elsif ( $c_opts{step} eq 'config' ) { build_machine_config(); }
else { croak "Correct option not given\n$usage\n"; }

sub build_perl_deps {
	print "Attempting to install needed Perl modules\n";
	system("perl -MCPAN -e 'get Moo'");
	system("perl -MCPAN -e 'get MCE'");
	system("perl -MCPAN -e 'get Config::Std'");
	system("perl -MCPAN -e 'get IPC::System::Simple'");
}

sub build_machine_config {
	print
	"\nmachine_creator is an interactive script which will help make config file generation quicker and easier\n\n";

	print "Specify tmp directory you would like to use [default /tmp]: ";
	my $tmp = <STDIN>;
	print "Enter path + fasta file [REQUIRED]: ";
	my $fasta = <STDIN>;
	print "Enter path to GATK Bundle [REQUIRED]: ";
	my $bundle = <STDIN>;
	print "Enter path to UGP background files [REQUIRED]: ";
	my $backgrounds = <STDIN>;
	print "Enter path to BWA directory [REQUIRED]: ";
	my $bwa = <STDIN>;
	print "Enter path to Picard_Tools directory [REQUIRED]: ";
	my $picard = <STDIN>;
	print "Enter path to SamTools directory [REQUIRED]: ";
	my $samtools = <STDIN>;
	print "Enter path to GATK directory [REQUIRED]: ";
	my $gatk = <STDIN>;
	print "Enter path to FastQC directory [REQUIRED]: ";
	my $fastqc = <STDIN>;
	print "\nWorking....\n";

	chomp(
	    $tmp,    $fasta,    $bundle, $backgrounds, $bwa,
	    $picard, $samtools, $gatk,   $fastqc
	);

	# set defaults and clean up.
	my $host = `hostname`;
	chomp($host);
	my $host_tmp = $host . '.cfg';
	$tmp           ||= '/tmp';
	my $config     ||= '../data/capture.cfg';
	my $new_config ||= $host_tmp;

	croak "fasta entered does not appear to be a file\n" unless ( -f $fasta );
	unless ( -d $bwa and -d $picard and -d $samtools and -d $gatk and -d $fastqc ) {
	    croak "Software paths enter are not directories\n";
	}
	$bwa =~ s/\/$//g;
	$picard =~ s/\/$//g;
	$samtools =~ s/\/$//g;
	$gatk =~ s/\/$//g;
	$fastqc =~ s/\/$//g;
	$bundle =~ s/\/$//g;
	croak "GATK bundle path not found\n"    unless ( -d $bundle );
	croak "UGP background path not found\n" unless ( -d $backgrounds );

	# add version infomation to config file
	my $bwa_v      = bwa_version($bwa);
	my $picard_v   = picard_version($picard);
	my $samtools_v = samtools_version($samtools);
	my $gatk_v     = gatk_version($gatk);
	my $fastqc_v   = fastqc_version($fastqc);
	chomp( $bwa_v, $picard_v, $samtools_v, $gatk_v, $fastqc_v );

	#### Build the sections of the config file ####

	# read in template config file
	read_config $config => my %config;

	# add fasta
	$config{main}{fasta} = $fasta;

	# add version and paths
	$config{main}{bwa_version}      = $bwa_v;
	$config{main}{picard_version}   = $picard_v;
	$config{main}{samtools_version} = $samtools_v;
	$config{main}{gatk_version}     = $gatk_v;
	$config{main}{fastqc_version}   = $fastqc_v;

	$config{software}{BWA}      = $bwa;
	$config{software}{Picard}   = $picard;
	$config{software}{SamTools} = $samtools;
	$config{software}{GATK}     = $gatk;
	$config{software}{FastQC}   = $fastqc;

	# add knowns
	$config{main}{known_indels} = [
	    "$bundle/Mills_and_1000G_gold_standard.indels.b37.vcf",
	    "$bundle/1000G_phase1.indels.b37.vcf"
	];
	$config{main}{known_dbsnp} = "$bundle/dbsnp_137.b37.vcf";

	$config{main}{resource_SNP} = [
	"hapmap,known=false,training=true,truth=true,prior=15.0 $bundle/hapmap_3.3.b37.vcf",
	"omni,known=false,training=true,truth=true,prior=12.0 $bundle/1000G_omni2.5.b37.vcf",
	"1000G,known=false,training=true,truth=false,prior=10.0 $bundle/1000G_phase1.snps.high_confidence.b37.vcf"
	];

	$config{main}{resource_INDEL} = [
	"mills,known=false,training=true,truth=true,prior=12.0 $bundle/Mills_and_1000G_gold_standard.indels.b37.vcf",
	"1000G,known=false,training=true,truth=true,prior=10.0 $bundle/1000G_phase1.indels.b37.vcf"
	];

	# add backgrounds
	$config{main}{backgrounds} = $backgrounds;

	# add tmp
	$config{main}{tmp} = $tmp;

	# write file
	write_config %config, $new_config;

	print "\nFinished\n";
	print
	"Please run project_config for you individual project with the option --config 'hostname.cfg'.\n";
}

##--------------------------------------------------------
##--------------------------------------------------------
##--------------------------------------------------------

sub bwa_version {
    my $bwa_p = shift;
    my $cmd   = $bwa_p . '/bwa';

    my $in = '';
    my $pid = open3( $in, ">&STDERR", \*PH, "$cmd" );
    my $version;
    while (<PH>) {
        next unless ( $_ =~ /^Version/ );
        my ( $name, $ver ) = split ":", $_;
        $ver =~ s/^\s+$//g;
        $version = $ver;
    }
    waitpid( $pid, 0 );
    return $version;
}

##--------------------------------------------------------

sub picard_version {
    my $picard_p = shift;
    my $cmd      = 'java -jar ' . $picard_p . '/CollectMultipleMetrics.jar';

    my $in = '';
    my $pid = open3( $in, ">&STDERR", \*PH, "$cmd" );
    my $version;
    while (<PH>) {
        next unless ( $_ =~ /^Version/ );
        my ( $name, $ver ) = split ":", $_;
        $ver =~ s/^\s+$//g;
        $version = $ver;
    }
    waitpid( $pid, 0 );
    return $version;
}

##--------------------------------------------------------

sub samtools_version {
    my $samtools_p = shift;
    my $cmd        = $samtools_p . '/samtools';

    my $in = '';
    my $pid = open3( $in, ">&STDERR", \*PH, "$cmd" );
    my $version;
    while (<PH>) {
        next unless ( $_ =~ /^Version/ );
        my ( $name, $ver ) = split ":", $_;
        $ver =~ s/^\s+$//g;
        $version = $ver;
    }
    waitpid( $pid, 0 );
    return $version;
}

##--------------------------------------------------------

sub gatk_version {
    my $gatk_p  = shift;
    my $cmd     = 'java -jar ' . $gatk_p . '/GenomeAnalysisTK.jar -version';
    my $version = `$cmd`;
    return $version;
}

##--------------------------------------------------------

sub fastqc_version {
    my $fastqc_p = shift;
    my $cmd      = $fastqc_p . '/fastqc -version';
    my $version  = `$cmd`;
    $version =~ s/FastQC //g;
    return $version;
}

##--------------------------------------------------------

